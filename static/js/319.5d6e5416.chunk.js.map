{"version":3,"file":"static/js/319.5d6e5416.chunk.js","mappings":"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","sources":["webpack://first-project/./src/components/Login/Login.module.scss?4086","webpack://first-project/./src/components/Login/LoginForm/LoginForm.module.scss?ebd6","components/Login/LoginForm/LoginForm.jsx","components/Login/Login.jsx","webpack://first-project/./src/components/_common/Inputs/Inputs.module.scss?8af3","components/_common/Inputs/Inputs.jsx","webpack://first-project/./src/components/_common/WarningWithPopup/WarningWithPopup.module.scss?5cba","components/_common/WarningWithPopup/WarningWithPopup.jsx","utils/formValidation.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"wrap\":\"Login_wrap__t0WtG\",\"wrap_dark\":\"Login_wrap_dark__xKUkM\",\"container\":\"Login_container__ypYZL\",\"title\":\"Login_title__2q0pp\"};","// extracted by mini-css-extract-plugin\nexport default {\"wrap_dark\":\"LoginForm_wrap_dark__V49gI\",\"checkboxWrap\":\"LoginForm_checkboxWrap__ZGykx\",\"button\":\"LoginForm_button__faYe-\",\"inputWrap\":\"LoginForm_inputWrap__DL2GG\",\"errorWrapAbsolute\":\"LoginForm_errorWrapAbsolute__lG+3L\",\"generalError\":\"LoginForm_generalError__MkrHP\",\"captchaWrap\":\"LoginForm_captchaWrap__-u0SF\",\"captchaImg\":\"LoginForm_captchaImg__mqeap\"};","import styles from \"./LoginForm.module.scss\";\r\nimport { Field, Form, Formik, ErrorMessage } from \"formik\";\r\nimport { isRequired, maxLength, minLength, validateEmail } from \"../../../utils/formValidation\";\r\nimport { RenderInputFormik } from \"../../_common/Inputs/Inputs\";\r\nimport { useContext } from \"react\";\r\nimport { AppContext } from \"../../../App\";\r\nimport WarningWithPopup from \"../../_common/WarningWithPopup/WarningWithPopup\";\r\n\r\nconst LoginForm = (props) => {\r\n    const appContext = useContext(AppContext);\r\n\r\n    //validation\r\n    const validateLogin = (value) => {\r\n        let error = isRequired(value, appContext.currentLanguage);\r\n        if (!error) error = validateEmail(value, appContext.currentLanguage);\r\n        if (!error) error = minLength(value, 3, appContext.currentLanguage);\r\n        if (!error) error = maxLength(value, 30, appContext.currentLanguage);\r\n        return error;\r\n    };\r\n\r\n    const validatePassword = (value) => {\r\n        let error = isRequired(value, appContext.currentLanguage);\r\n        return error;\r\n    };\r\n\r\n    const submit = (values, actions) => {\r\n        props.logIn(values);\r\n        actions.setSubmitting(false);\r\n    };\r\n\r\n    return (\r\n        <div className={appContext.currentTheme === \"dark\" ? styles.wrap + \" \" + styles.wrap_dark : styles.wrap}>\r\n            <Formik initialValues={{ login: \"\", password: \"\", rememberMe: false }} onSubmit={submit}>\r\n                {({ isSubmitting }) => (\r\n                    <Form>\r\n                        <div className={styles.inputWrap}>\r\n                            <Field\r\n                                type=\"text\"\r\n                                name=\"login\"\r\n                                component={RenderInputFormik}\r\n                                validate={validateLogin}\r\n                                placeholder={appContext.currentLanguage === \"eng\" ? \"Login\" : appContext.currentLanguage === \"ru\" && \"Логин\"}\r\n                                options={{\r\n                                    padding: \"10px 45px 10px 20px\",\r\n                                    showErrors: true,\r\n                                }}\r\n                            />\r\n                            <div className={styles.errorWrapAbsolute}>\r\n                                <ErrorMessage name=\"login\" component={WarningWithPopup} />\r\n                            </div>\r\n                        </div>\r\n                        <div className={styles.inputWrap}>\r\n                            <Field\r\n                                type=\"password\"\r\n                                name=\"password\"\r\n                                component={RenderInputFormik}\r\n                                validate={validatePassword}\r\n                                placeholder={appContext.currentLanguage === \"eng\" ? \"Password\" : appContext.currentLanguage === \"ru\" && \"Пароль\"}\r\n                                options={{\r\n                                    padding: \"10px 45px 10px 20px\",\r\n                                    showErrors: true,\r\n                                }}\r\n                            />\r\n                            <div className={styles.errorWrapAbsolute}>\r\n                                <ErrorMessage name=\"password\" component={WarningWithPopup} />\r\n                            </div>\r\n                        </div>\r\n                        <div className={styles.checkboxWrap}>\r\n                            <Field\r\n                                type=\"checkbox\"\r\n                                name=\"rememberMe\"\r\n                                component={RenderInputFormik}\r\n                                label={appContext.currentLanguage === \"eng\" ? \"Remember me\" : appContext.currentLanguage === \"ru\" && \"Запомнить меня\"}\r\n                            />\r\n                        </div>\r\n                        {props.generalError && <div className={styles.generalError}>{props.generalError}</div>}\r\n                        {props.captcha && (\r\n                            <div className={styles.captchaWrap}>\r\n                                <img className={styles.captchaImg} src={props.captcha} alt=\"captcha\" />\r\n                                <Field\r\n                                    type=\"text\"\r\n                                    name=\"captcha\"\r\n                                    component={RenderInputFormik}\r\n                                    placeholder={\r\n                                        appContext.currentLanguage === \"eng\"\r\n                                            ? \"Enter anti-bot symbols\"\r\n                                            : appContext.currentLanguage === \"ru\" && \"Введите символы с картинки\"\r\n                                    }\r\n                                    options={{\r\n                                        padding: \"10px 20px\",\r\n                                    }}\r\n                                />\r\n                            </div>\r\n                        )}\r\n                        <button className={styles.button + \" button\"} type=\"submit\" disabled={isSubmitting}>\r\n                            {appContext.currentLanguage === \"eng\" && \"Log In\"} {appContext.currentLanguage === \"ru\" && \"Войти\"}\r\n                        </button>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LoginForm;\r\n","import { useContext, useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Navigate } from \"react-router-dom\";\r\nimport { AppContext } from \"../../App\";\r\nimport { logIn } from \"../../redux/authReducer\";\r\nimport { selectCaptchaURL, selectGeneralError, selectIsAuth } from \"../../redux/authSelectors\";\r\nimport styles from \"./Login.module.scss\";\r\nimport LoginForm from \"./LoginForm/LoginForm\";\r\nimport Helmet from \"react-helmet\";\r\n\r\nconst Login = (props) => {\r\n    const appContext = useContext(AppContext);\r\n    const docTitle = appContext.currentLanguage === \"eng\" ? \"Login | Feelanet\" : appContext.currentLanguage === \"ru\" && \"Авторизация | Feelanet\";\r\n\r\n    useEffect(() => {\r\n        document.title = docTitle;\r\n    }, []);\r\n\r\n    if (props.isAuth) {\r\n        return <Navigate to={\"../profile\"} />;\r\n    }\r\n\r\n    return (\r\n        <div className={appContext.currentTheme === \"dark\" ? styles.wrap + \" \" + styles.wrap_dark : styles.wrap}>\r\n            <Helmet title={docTitle} />\r\n            <div className={styles.container}>\r\n                <h1 className={styles.title}>\r\n                    {appContext.currentLanguage === \"eng\" && \"Log In\"} {appContext.currentLanguage === \"ru\" && \"Вход\"}\r\n                </h1>\r\n                <LoginForm logIn={props.logIn} generalError={props.generalError} captcha={props.captcha} />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        isAuth: selectIsAuth(state),\r\n        generalError: selectGeneralError(state),\r\n        captcha: selectCaptchaURL(state),\r\n    };\r\n};\r\n\r\nlet dispatchObj = {\r\n    logIn,\r\n};\r\n\r\nexport default connect(mapStateToProps, dispatchObj)(Login);\r\n","// extracted by mini-css-extract-plugin\nexport default {\"inputWrap\":\"Inputs_inputWrap__bxhik\",\"inputWrap_withIcon\":\"Inputs_inputWrap_withIcon__xxyLT\",\"inputWrap_dark\":\"Inputs_inputWrap_dark__wb1gX\",\"input\":\"Inputs_input__6JgzO\",\"icon\":\"Inputs_icon__v2Fgu\",\"input_login\":\"Inputs_input_login__PyDfd\",\"input_error\":\"Inputs_input_error__N+OzZ\",\"textarea\":\"Inputs_textarea__K0ZBr\",\"textarea_dark\":\"Inputs_textarea_dark__ibBbA\",\"textareaError\":\"Inputs_textareaError__+oBhi\",\"textareaWarning\":\"Inputs_textareaWarning__brwqt\",\"warningWrap\":\"Inputs_warningWrap__JmUfg\",\"checkboxWrap\":\"Inputs_checkboxWrap__AZQyn\",\"checkbox\":\"Inputs_checkbox__gnsjA\",\"checkbox__label\":\"Inputs_checkbox__label__G4bqt\"};","import styles from \"./Inputs.module.scss\";\r\nimport React, { useContext, useEffect } from \"react\";\r\nimport { SvgSelector } from \"../SvgSelector/SvgSelector\";\r\nimport { AppContext } from \"../../../App\";\r\n\r\nexport const RenderInputFormik = ({ form, field, options, onValueChange, children, ...props }) => {\r\n    const appContext = useContext(AppContext);\r\n\r\n    //max length check\r\n    options && options.inputMaxLength && field.value.length > options.inputMaxLength && (field.value = field.value.substr(0, options.inputMaxLength));\r\n\r\n    useEffect(() => {\r\n        onValueChange && onValueChange(field.value);\r\n    }, [field.value]);\r\n\r\n    let wrapClassName = appContext.currentTheme === \"dark\" ? styles.inputWrap + \" \" + styles.inputWrap_dark : styles.inputWrap;\r\n    let inputClassName;\r\n    switch (props.type) {\r\n        case \"text\":\r\n            wrapClassName = options && options.icon ? wrapClassName + \" \" + styles.inputWrap_withIcon : wrapClassName;\r\n            inputClassName = options && options.showErrors && form.errors[field.name] ? styles.input + \" \" + styles.input_error : styles.input;\r\n            break;\r\n        case \"checkbox\":\r\n            wrapClassName = styles.checkboxWrap;\r\n            inputClassName = styles.checkbox;\r\n            break;\r\n        default:\r\n            inputClassName = options && options.showErrors && form.errors[field.name] ? styles.input + \" \" + styles.input_error : styles.input;\r\n            break;\r\n    }\r\n\r\n    // const inputClassName = inputClassSwitch(props.inputType);\r\n\r\n    return (\r\n        <div className={wrapClassName}>\r\n            <input\r\n                style={{\r\n                    border: options && options.border,\r\n                    padding: options && options.padding,\r\n                }}\r\n                name={field.name}\r\n                value={field.value}\r\n                onChange={form.handleChange}\r\n                className={inputClassName}\r\n                checked={field.checked}\r\n                {...props}\r\n            />\r\n            {options && options.icon && <SvgSelector className={styles.icon} id={options.icon} />}\r\n            {props.label && <span className={styles.checkbox__label}>{props.label}</span>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport const RenderTextareaFormik = ({ form, field, ...props }) => {\r\n    const appContext = useContext(AppContext);\r\n\r\n    const InputClassSwitch = (inputType) => {\r\n        switch (inputType) {\r\n            default:\r\n                return appContext.currentTheme === \"dark\" ? styles.textarea + \" \" + styles.textarea_dark : styles.textarea;\r\n        }\r\n    };\r\n\r\n    const textareaRef = React.createRef();\r\n\r\n    const changeHeight = (e) => {\r\n        textareaRef.current.style.height = `${props.defaultHeight + 2}px`;\r\n        let contentHeight = `${e.target.scrollHeight}px`;\r\n        textareaRef.current.style.height = contentHeight;\r\n        props.onHeightChange && props.onHeightChange();\r\n    };\r\n\r\n    //проверяю значение на пустое для ресета высоты при сабмите\r\n    useEffect(() => {\r\n        if (!form.values[field.name]) resetHeight();\r\n    }, [form.values]);\r\n\r\n    const resetHeight = () => {\r\n        textareaRef.current.style.height = `${props.defaultHeight + 2}px`;\r\n    };\r\n\r\n    const inputClassName = InputClassSwitch(props.inputType);\r\n\r\n    return (\r\n        <textarea\r\n            ref={textareaRef}\r\n            style={{ height: `${props.defaultHeight}px`, maxHeight: props.maxHeight }}\r\n            type={props.type}\r\n            name={field.name}\r\n            onChange={(e) => {\r\n                form.handleChange(e);\r\n                changeHeight(e);\r\n            }}\r\n            onFocus={() => {\r\n                props.onFocus && props.onFocus();\r\n            }}\r\n            onBlur={() => {\r\n                props.onBlur && props.onBlur();\r\n            }}\r\n            value={field.value}\r\n            className={inputClassName}\r\n            placeholder={props.placeholder}\r\n        />\r\n    );\r\n};","// extracted by mini-css-extract-plugin\nexport default {\"wrapRelative\":\"WarningWithPopup_wrapRelative__sNJ98\",\"popupWrap\":\"WarningWithPopup_popupWrap__nVpZk\",\"icon\":\"WarningWithPopup_icon__+hTA9\",\"popup\":\"WarningWithPopup_popup__mUVXv\",\"text\":\"WarningWithPopup_text__mjsA2\"};","import { SvgSelector } from \"../SvgSelector/SvgSelector\";\r\nimport styles from \"./WarningWithPopup.module.scss\";\r\n\r\nexport default (props) => {\r\n    return (\r\n            <div className={styles.wrapRelative}>\r\n                <SvgSelector className={styles.icon} id=\"warning\" />\r\n                <div className={styles.popupWrap}>\r\n                    <div className={styles.popup}>\r\n                        <span className={styles.text}>{props.error || props.children}</span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n    );\r\n};\r\n","export const isRequired = (value, lang) => {\r\n    let error = 'Field is required';\r\n    lang === 'ru' && (error = 'Обязательное поле')\r\n    return value ? undefined : error\r\n}\r\n\r\nexport const isRequiredNoError = (value) => {\r\n    return value ? undefined : \" \";\r\n};\r\n\r\nexport const maxLength = (value, max, lang) => {\r\n    let error = null;\r\n    value && value.length > max && (error = `Must be ${max} characters or less`)\r\n    value && value.length > max && lang === 'ru' && (error = `Максимальная длина строки - ${max} символов`)\r\n    return error\r\n}\r\n\r\nexport const minLength = (value, min, lang) => {\r\n    let error = null;\r\n    value && value.length < min && (error = `Must be ${min} characters or less`)\r\n    value && value.length < min && lang === 'ru' && (error = `Минимальная длина строки - ${min} символов`)\r\n    return error;\r\n}\r\n\r\nexport const validateEmail = (value, lang) => {\r\n    let error;\r\n    if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value)) {\r\n        error = \"Invalid Email address\";\r\n        lang === 'ru' && (error = 'Некорректный Email адрес')\r\n    }\r\n    return error;\r\n};\r\n\r\nexport const validateUrl = (value, lang) => {\r\n    let error;\r\n    if (value.length === 0) { return error }\r\n    if (!/^[A-Z0-9._%+-]+\\.[A-Z0-9/._-]{2,1000}$/i.test(value)) {\r\n        error = \"Invalid URL\";\r\n        lang === 'ru' && (error = 'Некорректный URL адрес')\r\n    }\r\n    return error;\r\n}"],"names":["props","appContext","useContext","AppContext","validateLogin","value","error","isRequired","currentLanguage","validateEmail","minLength","maxLength","validatePassword","className","currentTheme","styles","initialValues","login","password","rememberMe","onSubmit","values","actions","logIn","setSubmitting","isSubmitting","type","name","component","RenderInputFormik","validate","placeholder","options","padding","showErrors","WarningWithPopup","label","generalError","captcha","src","alt","disabled","dispatchObj","connect","state","isAuth","selectIsAuth","selectGeneralError","selectCaptchaURL","docTitle","useEffect","document","title","to","Helmet","form","field","onValueChange","children","inputMaxLength","length","substr","inputClassName","wrapClassName","icon","errors","style","border","onChange","handleChange","checked","SvgSelector","id","RenderTextareaFormik","textareaRef","React","resetHeight","current","height","defaultHeight","inputType","ref","maxHeight","e","contentHeight","target","scrollHeight","onHeightChange","changeHeight","onFocus","onBlur","lang","undefined","isRequiredNoError","max","min","test","validateUrl"],"sourceRoot":""}