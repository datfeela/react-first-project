{"version":3,"file":"static/js/881.9b8f11a0.chunk.js","mappings":"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","sources":["webpack://first-project/./src/components/Dialogs/Dialogs.module.scss?d037","webpack://first-project/./src/components/Dialogs/DialogsList/DialogsList.module.scss?369e","webpack://first-project/./src/components/Dialogs/DialogsList/Dialog/Dialog.module.scss?418f","components/Dialogs/DialogsList/Dialog/Dialog.jsx","components/Dialogs/DialogsList/DialogsList.jsx","webpack://first-project/./src/components/Dialogs/DialogsSearch/DialogsSearch.module.scss?e29f","components/Dialogs/DialogsSearch/DialogsSearch.jsx","components/Dialogs/Dialogs.jsx","webpack://first-project/./src/components/_common/Inputs/Inputs.module.scss?8af3","components/_common/Inputs/Inputs.jsx","webpack://first-project/./src/components/_common/Preloader/Preloader.module.scss?3ea5","components/_common/Preloader/Preloader.jsx","hoc/withAuthRedirect.js","redux/chatSelectors.js","utils/checkScrollbar.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"wrap\":\"Dialogs_wrap__1FpUx\",\"preloaderWrap\":\"Dialogs_preloaderWrap__qtIGW\"};","// extracted by mini-css-extract-plugin\nexport default {\"wrap\":\"DialogsList_wrap__7rzvj\",\"wrap_dark\":\"DialogsList_wrap_dark__ObQGZ\"};","// extracted by mini-css-extract-plugin\nexport default {\"wrap\":\"Dialog_wrap__I3mgK\",\"wrap_newMessage\":\"Dialog_wrap_newMessage__fPCYX\",\"wrap_dark\":\"Dialog_wrap_dark__VT1ZN\",\"name\":\"Dialog_name__pGcb-\",\"avatar\":\"Dialog_avatar__XeFjE\",\"newMessageNotification\":\"Dialog_newMessageNotification__74u41\"};","import { useContext } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { AppContext } from \"../../../../App\";\r\nimport styles from \"./Dialog.module.scss\";\r\n\r\nconst Dialog = ({ id, userName, hasNewMessages, newMessagesCount, photos, ...props }) => {\r\n    const appContext = useContext(AppContext);\r\n\r\n    let wrapClassName = appContext.currentTheme === \"dark\" ? styles.wrap + \" \" + styles.wrap_dark : styles.wrap;\r\n    wrapClassName = hasNewMessages ? wrapClassName + \" \" + styles.wrap_newMessage : wrapClassName;\r\n\r\n    return (\r\n        <NavLink to={`/dialog/${id}`} className={wrapClassName}>\r\n            <img src={photos.small ? photos.small : \"https://via.placeholder.com/120x120?text=Pic\"} alt=\"\" className={styles.avatar} />\r\n            <div className={styles.content}>\r\n                <span className={styles.name}>{userName}</span>\r\n                {hasNewMessages && <div className={styles.newMessageNotification}>{newMessagesCount}</div>}\r\n            </div>\r\n        </NavLink>\r\n    );\r\n};\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {};\r\n};\r\n\r\nlet dispatchObj = {};\r\n\r\nexport default connect(mapStateToProps, dispatchObj)(Dialog);\r\n","import styles from \"./DialogsList.module.scss\";\r\nimport Dialog from \"./Dialog/Dialog\";\r\nimport { connect } from \"react-redux\";\r\nimport { selectDialogs } from \"../../../redux/chatSelectors\";\r\nimport { useContext } from \"react\";\r\nimport { AppContext } from \"../../../App\";\r\n\r\nconst DialogsList = ({ dialogs }) => {\r\n    const appContext = useContext(AppContext);\r\n\r\n    let dialogElems = dialogs.map((el) => <Dialog key={el.id} {...el} />);\r\n    if (dialogElems.length === 0) {\r\n        return <div>No dialogs found</div>;\r\n    }\r\n    return <div className={appContext.currentTheme === \"dark\" ? styles.wrap + \" \" + styles.wrap_dark : styles.wrap}>{dialogElems}</div>;\r\n};\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        dialogs: selectDialogs(state),\r\n    };\r\n};\r\n\r\nlet dispatchObj = {};\r\n\r\nexport default connect(mapStateToProps, dispatchObj)(DialogsList);\r\n","// extracted by mini-css-extract-plugin\nexport default {\"wrap\":\"DialogsSearch_wrap__6ej5K\",\"wrap_dark\":\"DialogsSearch_wrap_dark__JJngr\"};","import styles from \"./DialogsSearch.module.scss\";\r\nimport { Field, Form, Formik } from \"formik\";\r\nimport { RenderInputFormik } from \"../../_common/Inputs/Inputs\";\r\nimport { setDialogsSearchTerm } from \"../../../redux/chatReducer\";\r\nimport { selectDialogsSearchTerm } from \"../../../redux/chatSelectors\";\r\nimport { connect } from \"react-redux\";\r\nimport { useContext } from \"react\";\r\nimport { AppContext } from \"../../../App\";\r\n\r\nconst DialogsSearch = (props) => {\r\n    const appContext = useContext(AppContext);\r\n\r\n    const submit = (values, actions) => {\r\n        actions.setSubmitting(false);\r\n    };\r\n\r\n    const setSearchTerm = (value) => {\r\n        value !== props.searchTerm && props.setDialogsSearchTerm(value);\r\n    };\r\n\r\n    return (\r\n        <div className={appContext.currentTheme === \"dark\" ? styles.wrap + \" wrapNoPadding \" + styles.wrap_dark : styles.wrap + \" wrapNoPadding\"}>\r\n            <Formik initialValues={{ dialogsSearchInput: \"\" }} onSubmit={submit}>\r\n                {() => (\r\n                    <Form>\r\n                        <Field\r\n                            type=\"text\"\r\n                            name=\"dialogsSearchInput\"\r\n                            component={RenderInputFormik}\r\n                            placeholder={\r\n                                appContext.currentLanguage === \"eng\"\r\n                                    ? \"Search for dialogs...\"\r\n                                    : appContext.currentLanguage === \"ru\" && \"Поиск диалогов\"\r\n                            }\r\n                            onValueChange={setSearchTerm}\r\n                            autoComplete=\"off\"\r\n                            options={{\r\n                                border: \"none\",\r\n                                icon: \"search\",\r\n                                padding: \"0px\",\r\n                            }}\r\n                        />\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </div>\r\n    );\r\n};\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        searchTerm: selectDialogsSearchTerm(state),\r\n    };\r\n};\r\n\r\nlet dispatchObj = {\r\n    setDialogsSearchTerm,\r\n};\r\n\r\nexport default connect(mapStateToProps, dispatchObj)(DialogsSearch);\r\n","import styles from \"./Dialogs.module.scss\";\r\nimport { useContext, useEffect, useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\";\r\nimport { compose } from \"redux\";\r\nimport { initializeDialogs } from \"../../redux/chatReducer\";\r\nimport { selectDialogsIsInit } from \"../../redux/chatSelectors\";\r\n\r\nimport Preloader from \"../_common/Preloader/Preloader\";\r\nimport DialogsList from \"./DialogsList/DialogsList\";\r\nimport DialogsSearch from \"./DialogsSearch/DialogsSearch\";\r\nimport { AppContext } from \"../../App\";\r\nimport { checkScrollbar } from \"../../utils/checkScrollbar\";\r\nimport Helmet from \"react-helmet\";\r\n\r\nconst Dialogs = ({ isInit, initializeDialogs }) => {\r\n    const appContext = useContext(AppContext);\r\n    const docTitle = appContext.currentLanguage === \"eng\" ? \"Messages | Feelanet\" : appContext.currentLanguage === \"ru\" && \"Сообщения | Feelanet\";\r\n\r\n    useEffect(() => {\r\n        checkScrollbar() ? appContext.setIsScrollbarActive(true) : appContext.setIsScrollbarActive(false);\r\n    });\r\n\r\n    useEffect(() => {\r\n        initializeDialogs();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        document.title = docTitle;\r\n    }, [appContext.currentLanguage]);\r\n\r\n    if (!isInit)\r\n        return (\r\n            <div className={styles.preloaderWrap + \" wrapNoPadding\"}>\r\n                <Preloader />\r\n            </div>\r\n        );\r\n\r\n    if (isInit)\r\n        return (\r\n            <div className={styles.wrap}>\r\n                <Helmet title={docTitle} />\r\n                <DialogsSearch />\r\n                <DialogsList />\r\n            </div>\r\n        );\r\n};\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        isInit: selectDialogsIsInit(state),\r\n    };\r\n};\r\n\r\nlet dispatchObj = {\r\n    initializeDialogs,\r\n};\r\n\r\nexport default compose(connect(mapStateToProps, dispatchObj), withAuthRedirect)(Dialogs);\r\n","// extracted by mini-css-extract-plugin\nexport default {\"inputWrap\":\"Inputs_inputWrap__bxhik\",\"inputWrap_withIcon\":\"Inputs_inputWrap_withIcon__xxyLT\",\"inputWrap_dark\":\"Inputs_inputWrap_dark__wb1gX\",\"input\":\"Inputs_input__6JgzO\",\"icon\":\"Inputs_icon__v2Fgu\",\"input_login\":\"Inputs_input_login__PyDfd\",\"input_error\":\"Inputs_input_error__N+OzZ\",\"textarea\":\"Inputs_textarea__K0ZBr\",\"textarea_dark\":\"Inputs_textarea_dark__ibBbA\",\"textareaError\":\"Inputs_textareaError__+oBhi\",\"textareaWarning\":\"Inputs_textareaWarning__brwqt\",\"warningWrap\":\"Inputs_warningWrap__JmUfg\",\"checkboxWrap\":\"Inputs_checkboxWrap__AZQyn\",\"checkbox\":\"Inputs_checkbox__gnsjA\",\"checkbox__label\":\"Inputs_checkbox__label__G4bqt\"};","import styles from \"./Inputs.module.scss\";\r\nimport React, { useContext, useEffect } from \"react\";\r\nimport { SvgSelector } from \"../SvgSelector/SvgSelector\";\r\nimport { AppContext } from \"../../../App\";\r\n\r\nexport const RenderInputFormik = ({ form, field, options, onValueChange, children, ...props }) => {\r\n    const appContext = useContext(AppContext);\r\n\r\n    //max length check\r\n    options && options.inputMaxLength && field.value.length > options.inputMaxLength && (field.value = field.value.substr(0, options.inputMaxLength));\r\n\r\n    useEffect(() => {\r\n        onValueChange && onValueChange(field.value);\r\n    }, [field.value]);\r\n\r\n    let wrapClassName = appContext.currentTheme === \"dark\" ? styles.inputWrap + \" \" + styles.inputWrap_dark : styles.inputWrap;\r\n    let inputClassName;\r\n    switch (props.type) {\r\n        case \"text\":\r\n            wrapClassName = options && options.icon ? wrapClassName + \" \" + styles.inputWrap_withIcon : wrapClassName;\r\n            inputClassName = options && options.showErrors && form.errors[field.name] ? styles.input + \" \" + styles.input_error : styles.input;\r\n            break;\r\n        case \"checkbox\":\r\n            wrapClassName = styles.checkboxWrap;\r\n            inputClassName = styles.checkbox;\r\n            break;\r\n        default:\r\n            inputClassName = options && options.showErrors && form.errors[field.name] ? styles.input + \" \" + styles.input_error : styles.input;\r\n            break;\r\n    }\r\n\r\n    // const inputClassName = inputClassSwitch(props.inputType);\r\n\r\n    return (\r\n        <div className={wrapClassName}>\r\n            <input\r\n                style={{\r\n                    border: options && options.border,\r\n                    padding: options && options.padding,\r\n                }}\r\n                name={field.name}\r\n                value={field.value}\r\n                onChange={form.handleChange}\r\n                className={inputClassName}\r\n                checked={field.checked}\r\n                {...props}\r\n            />\r\n            {options && options.icon && <SvgSelector className={styles.icon} id={options.icon} />}\r\n            {props.label && <span className={styles.checkbox__label}>{props.label}</span>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport const RenderTextareaFormik = ({ form, field, ...props }) => {\r\n    const appContext = useContext(AppContext);\r\n\r\n    const InputClassSwitch = (inputType) => {\r\n        switch (inputType) {\r\n            default:\r\n                return appContext.currentTheme === \"dark\" ? styles.textarea + \" \" + styles.textarea_dark : styles.textarea;\r\n        }\r\n    };\r\n\r\n    const textareaRef = React.createRef();\r\n\r\n    const changeHeight = (e) => {\r\n        textareaRef.current.style.height = `${props.defaultHeight + 2}px`;\r\n        let contentHeight = `${e.target.scrollHeight}px`;\r\n        textareaRef.current.style.height = contentHeight;\r\n        props.onHeightChange && props.onHeightChange();\r\n    };\r\n\r\n    //проверяю значение на пустое для ресета высоты при сабмите\r\n    useEffect(() => {\r\n        if (!form.values[field.name]) resetHeight();\r\n    }, [form.values]);\r\n\r\n    const resetHeight = () => {\r\n        textareaRef.current.style.height = `${props.defaultHeight + 2}px`;\r\n    };\r\n\r\n    const inputClassName = InputClassSwitch(props.inputType);\r\n\r\n    return (\r\n        <textarea\r\n            ref={textareaRef}\r\n            style={{ height: `${props.defaultHeight}px`, maxHeight: props.maxHeight }}\r\n            type={props.type}\r\n            name={field.name}\r\n            onChange={(e) => {\r\n                form.handleChange(e);\r\n                changeHeight(e);\r\n            }}\r\n            onFocus={() => {\r\n                props.onFocus && props.onFocus();\r\n            }}\r\n            onBlur={() => {\r\n                props.onBlur && props.onBlur();\r\n            }}\r\n            value={field.value}\r\n            className={inputClassName}\r\n            placeholder={props.placeholder}\r\n        />\r\n    );\r\n};","// extracted by mini-css-extract-plugin\nexport default {\"wrap\":\"Preloader_wrap__BkHvc\",\"gif\":\"Preloader_gif__18c7L\"};","import loadingGif from \"../../../lib/img/preloading.gif\";\r\nimport styles from \"./Preloader.module.scss\";\r\n\r\nconst Preloader = (props) => {\r\n    return <div className={styles.wrap}>\r\n        <img className={styles.gif} src={loadingGif}></img>\r\n    </div>\r\n};\r\n\r\nexport default Preloader;\r\n","import { connect } from 'react-redux';\r\nimport { Navigate } from 'react-router-dom';\r\nimport { getUserData } from '../redux/authReducer';\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n\r\n    let RedirectComponent = (props) => {\r\n        if (props.isAuth) return (\r\n            <Component {...props} />\r\n        )\r\n        return (\r\n            <Navigate replace to=\"/login\" />\r\n        )\r\n    };\r\n\r\n    let mapStateToProps = (state) => {\r\n        return {\r\n            isAuth: state.auth.isAuth\r\n        };\r\n    };\r\n\r\n    let dispatchObj = {\r\n        getUserData\r\n    }\r\n\r\n    let containerAuthRedirect = connect(mapStateToProps, dispatchObj)(RedirectComponent);\r\n    return containerAuthRedirect;\r\n}\r\n\r\n\r\n\r\n\r\n","import { createSelector } from \"reselect\"\r\n\r\nexport const selectDialogsIsInit = (state) => {\r\n    return state.chat.dialogsIsInit\r\n}\r\n\r\nexport const selectChatIsInit = (state) => {\r\n    return state.chat.chatIsInit\r\n}\r\n\r\nexport const selectDialogsSearchTerm = (state) => {\r\n    return state.chat.dialogsSearchTerm\r\n}\r\n\r\nconst selectDialogsWOSearchTerm = (state) => {\r\n    return state.chat.dialogs\r\n}\r\n\r\nexport const selectDialogs = createSelector(selectDialogsWOSearchTerm, selectDialogsSearchTerm, (dialogs, searchTerm) => {\r\n    let filteredDialogs = dialogs.filter(dialog => dialog.userName.includes(searchTerm))\r\n    return filteredDialogs;\r\n})\r\n\r\nexport const selectMessages = (state) => {\r\n    return state.chat.messages\r\n}\r\n\r\nexport const selectUserImg = (state) => {\r\n    return state.chat.userPhoto\r\n}\r\n\r\nexport const selectRecipientName = (state) => {\r\n    return state.chat.recipientName\r\n}\r\n\r\nexport const selectRecipientImg = (state) => {\r\n    return state.chat.recipientPhoto\r\n}","export const checkScrollbar = () => {\r\n    if (document.body.clientWidth < window.innerWidth) {\r\n        return true\r\n    }\r\n    return false\r\n}"],"names":["connect","state","id","userName","hasNewMessages","newMessagesCount","photos","wrapClassName","useContext","AppContext","currentTheme","styles","to","className","src","small","alt","dialogs","selectDialogs","appContext","dialogElems","map","el","length","dispatchObj","setDialogsSearchTerm","searchTerm","selectDialogsSearchTerm","props","setSearchTerm","value","initialValues","dialogsSearchInput","onSubmit","values","actions","setSubmitting","type","name","component","RenderInputFormik","placeholder","currentLanguage","onValueChange","autoComplete","options","border","icon","padding","initializeDialogs","compose","isInit","selectDialogsIsInit","withAuthRedirect","docTitle","useEffect","checkScrollbar","setIsScrollbarActive","document","title","Helmet","Preloader","form","field","children","inputMaxLength","substr","inputClassName","showErrors","errors","style","onChange","handleChange","checked","SvgSelector","label","RenderTextareaFormik","textareaRef","React","resetHeight","current","height","defaultHeight","inputType","ref","maxHeight","e","contentHeight","target","scrollHeight","onHeightChange","changeHeight","onFocus","onBlur","loadingGif","Component","getUserData","isAuth","auth","replace","chat","dialogsIsInit","selectChatIsInit","chatIsInit","dialogsSearchTerm","createSelector","filter","dialog","includes","selectMessages","messages","selectUserImg","userPhoto","selectRecipientName","recipientName","selectRecipientImg","recipientPhoto","body","clientWidth","window","innerWidth"],"sourceRoot":""}